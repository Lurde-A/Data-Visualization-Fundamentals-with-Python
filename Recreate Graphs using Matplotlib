                                BAR CHART WITH ERROR
GIVEN:
import codecademylib
from matplotlib import pyplot as plt
past_years_averages = [82, 84, 83, 86, 74, 84, 90]
years = [2000, 2001, 2002, 2003, 2004, 2005, 2006]
error = [1.5, 2.1, 1.2, 3.2, 2.3, 1.7, 2.4]
# Make your chart here
plt.show()
  1. First, create a figure of width 10 and height 8.
//
plt.figure(figsize=(10,8))
plt.show()
  2. Plot the blue bars, which have the heights listed in past_years_averages.
//
plt.figure(figsize=(10,8))
plt.bar(range(len(past_years_averages)), past_years_averages)
plt.show()
  3. Add error bars of cap size 5 and heights corresponding to the list error.
//
plt.figure(figsize=(10,8))
plt.bar(range(len(past_years_averages)), past_years_averages, yerr=error, capsize=5)
plt.show()
  4. Set the axis to go from -0.5 to 6.5 on the x-axis and 70 to 95 on the y-axis.
//
plt.figure(figsize=(10,8))
plt.bar(range(len(past_years_averages)), past_years_averages, yerr=error, capsize=5)
plt.axis([-0.5, 6.5, 70, 95])
plt.show()
  5. Create an ax object using plt.subplot(). Use ax to set the x-axis ticks to be range(len(years)) and the x-axis labels to be the years list.
//
plt.figure(figsize=(10,8))
plt.bar(range(len(past_years_averages)), past_years_averages, yerr=error, capsize=5)
plt.axis([-0.5, 6.5, 70, 95])
ax=plt.subplot()
ax.set_xticks(range(len(years)))
ax.set_xticklabels(years)
plt.show()
  6. Add the title "Final Exam Averages", x-axis label "Year", and y-axis label "Test average".
//
plt.figure(figsize=(10,8))
plt.bar(range(len(past_years_averages)), past_years_averages, yerr=error, capsize=5)
plt.axis([-0.5, 6.5, 70, 95])
ax=plt.subplot()
ax.set_xticks(range(len(years)))
ax.set_xticklabels(years)
plt.title('Final Exam Averages')
plt.xlabel('Year')
plt.ylabel('Test average')
plt.show()
  7. Save your figure to a file called my_bar_chart.png.
//
plt.savefig('my_bar_chart.png')

                                SIDE-BY-SIDE BARS
GIVEN:
import codecademylib
from matplotlib import pyplot as plt
unit_topics = ['Limits', 'Derivatives', 'Integrals', 'Diff Eq', 'Applications']
middle_school_a = [80, 85, 84, 83, 86]
middle_school_b = [73, 78, 77, 82, 86]
def create_x(t, w, n, d):
    return [t*x + w*n for x in range(d)]
# Make your chart here
plt.show()
  1. Using create_x, make the lists school_a_x and school_b_x which will determine where to put the bars for Middle School A and Middle School B along the x-axis
//
# Make your chart here
t = 2 # Number of datasets in total
w = 0.8 # width of each bar
n = 1 # First dataset
d = 5 # Number of bars' sets
school_a_x = [t*x + w*n for x in range(d)]
t = 2 # Number of datasets in total
w = 0.8 # width of each bar
n = 2 # Second dataset
d = 5 # Number of bars' sets
school_b_x = [t*x + w*n for x in range(d)]
  2. Create a figure of width 10 and height 8.
//
plt.figure(figsize=(10,8))
plt.show()
  3. Create a set of axes and save them to ax.
//
ax=plt.subplot()
plt.show()
  4. Plot a set of bars representing middle_school_a and a set representing middle_school_b next to each other on the same graph.
//
plt.bar(school_a_x, middle_school_a)
plt.bar(school_b_x, middle_school_b)
plt.show()
  5. Create a new list of x-values called middle_x, which are the values in the middle of school_a_x and school_b_x. This is where we will place the x-ticks. Look at the final graph 
to see this placement.
//
middle_x = [(a + b / 2.0) for a,b in zip(school_a_x, school_b_x)]
plt.show()
  6. Set the x-ticks to be the middle_x list.
  7. Set the x-tick labels to be the list unit_topics.
//
ax.set_xticks(middle_x)
ax.set_xticklabels(unit_topics)
plt.show()
  8. Create a legend, as shown in the final graph, that labels the first set of bars Middle School A and the second set of bars Middle School B.
//
ax.xticks(middle_x)
ax.set_xticklabels(unit_topics)
plt.legend(['Middle School A', 'Middle School B'])
plt.show()
  9. Create a title (“Test Averages on Different Units”), x-axis label (“Unit”), and y-axis label (“Test Average”).
  10. Save your figure to a file called my_side_by_side.png
//
ax.set_xticks(middle_x)
ax.set_xticklabels(unit_topics)
plt.legend(['Middle School A', 'Middle School B'])
plt.title('Test Averages on Different Units')
plt.xlabel('Unit')
plt.ylabel('Test Average')
plt.savefig('my_side_by_side.png')
plt.show()

                                STACKED BARS
GIVEN:
import codecademylib
from matplotlib import pyplot as plt
import numpy as np
unit_topics = ['Limits', 'Derivatives', 'Integrals', 'Diff Eq', 'Applications']
As = [6, 3, 4, 3, 5]
Bs = [8, 12, 8, 9, 10]
Cs = [13, 12, 15, 13, 14]
Ds = [2, 3, 3, 2, 1]
Fs = [1, 0, 0, 3, 0]
x = range(5)
c_bottom = np.add(As, Bs)
#create d_bottom and f_bottom here
#create your plot here
plt.show()
  1. The Bs bars will go on top of the As bars, but at what heights will the Cs, Ds, and Fs bars start? The bottom of the bars representing the Cs will be at the height of the As 
plus the Bs. We can do this in NumPy (a scientific computing package for Python) with the np.add function. c_bottom, the starting heights for the Cs, will be:
c_bottom = np.add(As, Bs)
Underneath the definition of c_bottom, define d_bottom (where the Cs end), and f_bottom (where the Ds end).
//
#create d_bottom and f_bottom here
d_bottom = np.add(c_bottom, Cs)
f_bottom = np.add(d_bottom, Ds)
  2. Create a figure of width 10 and height 8.
//
plt.figure(figsize=(10,8))
  3. Plot the As, Bs, Cs, Ds, and Fs. Give each one the appropriate bottom list that will stack them on top of each other.
//
plt.figure(figsize=(10,8))
plt.bar(range(len(As)), As)
plt.bar(range(len(As)), Bs, bottom=As)
plt.bar(range(len(As)), Cs, bottom=c_bottom)
plt.bar(range(len(As)), Ds, bottom=d_bottom)
plt.bar(range(len(As)), Fs, bottom=f_bottom)
  4. Create a set of axes and save them to ax.
//
ax = plt.subplot()
  5. Set the x-ticks to be range(len(unit_topics)).
//
ax.set_xticks(range(len(unit_topics)))
  6. Set the x-tick labels to be the unit_topics.
//
ax.set_xticklabels(unit_topics)
  7. Give the plot the title you see in the final graph, and the same x-axis label and y-axis label.
//
plt.title('Grade distribution')
plt.xlabel('Unit')
plt.ylabel('Number of Students')
  8. Save your figure to a file called my_stacked_bar.png.
//
plt.title('Grade distribution')
plt.xlabel('Unit')
plt.ylabel('Number of Students')
plt.savefig('my_stacked_bar.png')

                                TWO HISTOGRAMS ON A PLOT
GIVEN:
import codecademylib3
from matplotlib import pyplot as plt
exam_scores1 = [62.58, 67.63, 81.37, 52.53, 62.98, 72.15, 59.05, 73.85, 97.24, 76.81, 89.34, 74.44, 68.52, 85.13, 90.75, 70.29, 75.62, 85.38, 77.82, 98.31, 79.08, 61.72, 71.33, 80.77, 
80.31, 78.16, 61.15, 64.99, 72.67, 78.94]
exam_scores2 = [72.38, 71.28, 79.24, 83.86, 84.42, 79.38, 75.51, 76.63, 81.48,78.81,79.23,74.38,79.27,81.07,75.42,90.35,82.93,86.74,81.33,95.1,86.57,83.66,85.58,81.87,92.14,72.15,91.64,
74.21,89.04,76.54,81.9,96.5,80.05,74.77,72.26,73.23,92.6,66.22,70.09,77.2]
plt.show()
  1. Create a figure of width 10 and height 8.
plt.figure(figsize=(10,8))
  2. Make a histogram of the exam_scores1, normalized, with 12 bins.
//
plt.hist(exam_scores1, bins=12, density=True)
  3. Make a histogram of the exam_scores2, normalized, with 12 bins.
//
plt.hist(exam_scores2, bins=12, density=True)
  4. Add histtype = 'step' to each plt.hist call, in order to make these histograms more visible. We can also make the lines thicker by setting the linewidth inside the calls to plt.hist.
Let’s set the linewidth to be 2 for both histograms.
//
plt.hist(exam_scores1, bins=12, density=True, histtype = 'step', linewidth=2)
plt.hist(exam_scores2, bins=12, density=True, histtype = 'step', linewidth=2)
  5. Create a legend showing that the first set of data is "1st Yr Teaching" and the second set of data is "2nd Yr Teaching".
