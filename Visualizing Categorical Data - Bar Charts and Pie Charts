                                      INTRODUCTION TO BAR CHARTS
GIVEN:
import codecademylib3
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
# add in your answers here!
left_plot = "answer here!"
right_plot = "answer_here!"
heroes_data = pd.read_csv("heroes_information.csv")
# line of code used to clean up messy data
heroes_data_cleaned = heroes_data[heroes_data.Alignment != "-"]
#### code for left plot
plt.subplot(1, 2, 1)
sns.countplot(heroes_data_cleaned["Alignment"])
#### code for right plot
plt.subplot(1, 2, 2)
sns.histplot(heroes_data_cleaned["Height"])
plt.xlim(0,500)
plt.show()
  1. In plot.py, we have written up some code to create a bar chart and a histogram using data about superheroes from heroes_information.csv. You should see both plots in the web browser 
on the far right. There are two variables on lines 7 and 8 of plot.py:
left_plot: corresponds to the plot on the left side of the web browser.
right_plot: correspond to the plot on the right side of the web browser.
For each variable, choose whether you believe it is a bar chart or histogram by setting it equal to either "Bar Chart" or "Histogram" where it says "answer here!".
//
left_plot = "Bar Chart"
right_plot = "Histogram"

                                      PLOTTING BAR CHARTS USING SEABORN
GIVEN:
import codecademylib3
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv("games.csv")
print(df.head())
  2. Let’s practice plotting our own bar chart. In plot.py, there is a csv file loaded called games.csv. This dataset contains information about various chess games, including:
Number of turns the game took
Ending result (checkmate/draw/resign)
Who won (player with white pieces or black pieces)
Other variables
Feel free to read more about the dataset here. Click run to see the first five rows of the file. Which categories would be useful to visualize with a .countplot() method?
//
For example - winner, rated, victory_status categories. 
  3. Plot the counts of each value in victory_status using the .countplot() method. Be sure to show your plot after using the method.
//
sns.countplot(df['victory_status'])
plt.show()

                                      BAR CHART ORDERING
GIVEN:
import codecademylib3
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv("school_data.csv")
print(df.head())
value_order = ["NOT ENOUGH DATA", "VERY WEAK", "WEAK", "NEUTRAL", "STRONG", "VERY STRONG"]
type_of_data = "fill in here"
# plot using .countplot() method here
# plt.xticks(rotation=30)
# show your plot here
  4. In the plot.py file, we have imported a dataset called school_data.csv and previewed it in the browser. This file contains data about schools in the Chicago, Illinois area.
We are going to look at a column called Supportive Environment which documents how various schools in the area rate in terms of supportiveness with the following values:
NOT ENOUGH DATA
VERY WEAK
WEAK
NEUTRAL
STRONG
VERY STRONG
Before we plot, determine whether this column of data is ordinal or nominal.
Fill in your answer as "nominal" or "ordinal" in the variable type_of_data on line 10.
//
type_of_data = "ordinal"
  5. Graph the Supportive Environment column using the .countplot() method. You may notice the following line of code that is commented out:
plt.xticks(rotation=30)
Uncomment this line of code. It is a Matplotlib method that will rotate your labels along the x-axis to make sure they are visible. For it to work, be sure to call .countplot() above it.
Lastly, make sure you call plt.show() after both the .countplot() and .xticks() method.
//
sns.countplot(df['Supportive Environment'])
plt.xticks(rotation=30)
plt.show()
  6. Let’s order the labels on the x-axis, putting NOT ENOUGH DATA on the far left and VERY STRONG on the far right. We have conveniently put the order of the labels in a variable called 
value_order for you. Add the order parameter into your existing .countplot() method, and use value_order to order the bars accordingly. After plotting the order parameter, you should get 
a better sense of the distribution of the ordinal data. What is the mode of this data, and what does it tell us? Do more students believe that their school has a supportive environment or 
doesn’t have a supportive environment?
//
sns.countplot(df['Supportive Environment'], order = value_order)

                                      PLOTTING PIE CHARTS USING MATPLOTLIB
GIVEN:
import matplotlib.pyplot as plt
import pandas as pd
import codecademylib3
water_usage = pd.read_csv("water_usage.csv")
print(water_usage.head())
  7. In pie_chart.py, we have loaded in a dataset called water_usage.csv and previewed it in the browser. Create two variables:
wedge_sizes should contain the data in the prop column.
pie_labels should contain the data in the water_source column.
//
wedge_sizes = water_usage.prop
pie_labels = water_usage.water_source
  8. Plot the water usage distribution using wedge_sizes and pie_labels. Show the plot. What do you notice about it?
//
plt.pie(wedge_sizes, labels=pie_labels)
plt.axis('equal')
plt.show()
  9. Currently, our pie chart is warped — it is wider than it is tall. Let’s fix this by using the .axis() Matplotlib method. Finally, let’s title our plot “Distribution of House Water 
Usage” to complete it! Be sure to use call both of these methods before the plt.show() line of code. Otherwise, they will not make any changes to the chart.
//
plt.pie(wedge_sizes, labels=pie_labels)
plt.axis('equal')
plt.show()
  10. Currently, our pie chart is warped — it is wider than it is tall. Let’s fix this by using the .axis() Matplotlib method. Finally, let’s title our plot “Distribution of House Water 
Usage” to complete it! Be sure to use call both of these methods before the plt.show() line of code. Otherwise, they will not make any changes to the chart.
//
plt.pie(wedge_sizes, labels=pie_labels)
plt.axis('equal')
plt.title('Distribution of House Water Usage')
plt.show()

                                      PITFALLS OF PIE CHARTS
GIVEN:
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import codecademylib3
pie_data = pd.read_csv("pie_data.csv")
graph_counts = pie_data["values"]
graph_labels = pie_data["labels"]
plt.subplot(1,2,1)
plt.pie(graph_counts, labels = graph_labels)
plt.axis('Equal')
plt.title("Tough to Compare")
plt.subplot(1,2,2)
#sns.barplot()
#plt.title("Easy to Compare")
plt.show()
  11. In plot.py, code to create a pie chart has already been written. Run the code to look at the pie chart. You will also see a blank graph next to it. Do not worry about it for now.
What do you notice about this pie chart? Could you identify what the largest and smallest wedges are without looking at the data?
//
No.
  12. On lines 18 and 19 of plot.py you should see two lines of code commented out.
#sns.barplot()
#plt.title("Easier to Compare")
We are going to use the .barplot() seaborn method to display our data on a bar chart. To do this:
Uncomment the line with sns.barplot().
Input graph_labels as the first argument in the barplot() method.
Input graph_counts as the second argument.
Uncomment line 19 as well, but do not touch the rest of the code.
When you run the code, you should see five bars appear in the empty graph. What do you notice about the bar chart when comparing it with the pie chart? Is it still difficult to compare 
the values of each category?
//
plt.subplot(1,2,2)
sns.barplot(graph_labels, graph_counts)
plt.title("Easy to Compare")
plt.show()

                                      MAKING YOUR PIE CHART BETTER
GIVEN:
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import codecademylib3
major_data = pd.read_csv("major_data.csv")
print(major_data.head())
major_data_agg = pd.read_csv("major_data_agg.csv")
print(major_data_agg.head())
pie_wedges = major_data["proportion"]
pie_labels = major_data["major"]
pie_wedges_agg = major_data_agg["proportion"]
pie_labels_agg = major_data_agg["department"]
plt.subplot(2,1,1)
plt.pie(pie_wedges, labels = pie_labels)
plt.axis('Equal')
plt.title("Too Many Slices")
plt.tight_layout()
plt.subplot(2,1,2)
#plt.pie()
plt.axis('Equal')
#plt.title("Good Number of Slices")
plt.tight_layout()
plt.show()
  13. In plot.py, we have the code to create the pie chart of college major distributions. You should see the pie chart with the title “Too Many Slices” along with a blank chart below it 
(ignore for now) in the browser. Note, you may have to scroll below the previewed tables in the browser.
Two datasets: major_data.csv and major_data_agg.csv are imported and saved to the following variables:
pie_wedges (wedge sizes for major_data.csv)
pie_labels (labels for major_data.csv)
pie_wedges_agg (wedge sizes for major_data_agg.csv)
pie_labels_agg (labels for major_data_agg.csv)
Currently, only major_data is plotted with a pie chart. We are going to plot major_data_agg now using pie_wedges_agg and pie_labels_agg. We set up the code to plot these pandas DataFrames:
Uncomment lines 25 and 27 of plot.py.
Using the .pie() method on line 25, plot pie_wedges_agg and pie_labels_agg.
//
plt.subplot(2,1,2)
plt.pie(pie_wedges_agg, labels=pie_labels_agg)
plt.axis('Equal')
plt.title("Good Number of Slices")
plt.tight_layout()
plt.show()
